{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Item","url","collada","useLoader","ColladaLoader","camera","useThree","scale","onAfterRender","lookAt","scene","position","object","dispose","Scene","domElement","gl","console","log","fallback","args","enablePan","ModelViewer","item","body","fabric","useState","currentItem","setItem","currentBody","setBody","currentFabric","setFabric","style","display","justifyContent","alignItems","padding","Autocomplete","value","onChange","e","v","body_variations","length","fabric_variations","p","id","options","Items","getOptionLabel","op","name","width","renderInput","params","TextField","label","variant","slice","flex","process","file","extend","OrbitControls","TrackballControls","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b64cc4a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useRef, Suspense } from 'react';\nimport { ColladaLoader } from \"three/examples/jsm/loaders/ColladaLoader\";\nimport { Canvas, useLoader, extend, useThree, useFrame } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport Items from './items.json';\n\nconst modelfolder = \"/FurnitureOutput\"\n\nfunction getFileName(item, body, fabric) {\n  if (item === null) {\n    return \"\"\n  }\n  if (body === \"\" && fabric === \"\") {\n    return process.env.PUBLIC_URL + modelfolder + \"/\" + item.file + \"/\" + item.file + \".dae\"\n  }\n  return process.env.PUBLIC_URL + modelfolder + \"/\" + item.file + \"/\" + body.slice(-5) + fabric.slice(-7) + \".dae\"\n}\n\nextend({ OrbitControls, TrackballControls })\n\nfunction Item({ url }) {\n  const collada = useLoader(ColladaLoader, url)\n  const { camera } = useThree()\n  return (\n    <mesh scale={[1, 1, 1]}\n      onAfterRender={() => {\n        camera.lookAt(collada.scene.position)\n      }}\n    >\n      <primitive object={collada.scene} dispose={null} />\n    </mesh>\n  )\n}\n\nfunction Scene({ url }) {\n  const { camera, gl: { domElement } } = useThree()\n  console.log(url)\n  return (\n    <>\n      <Suspense fallback={null}>\n        <Item url={url} />\n      </Suspense>\n      <orbitControls args={[camera, domElement]} enablePan={false} />\n    </>\n  )\n}\n\nfunction ModelViewer() {\n  const [currentItem, setItem] = useState(null);\n  const [currentBody, setBody] = useState(\"\");\n  const [currentFabric, setFabric] = useState(\"\");\n\n  return (\n    <>\n      <div style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: \"10px\"\n      }}>\n        <Autocomplete\n          value={currentItem}\n          onChange={(e, v) => {\n            setItem(v);\n            if (v?.body_variations?.length > 0) {\n              setBody(v.body_variations[0])\n            } else {\n              setBody(\"\")\n            }\n            if (v?.fabric_variations?.length > 0) {\n              setFabric(v.fabric_variations[0])\n            } else {\n              setFabric(\"\")\n            }\n          }}\n          p={2}\n          id=\"item-list\"\n          options={Items}\n          getOptionLabel={(op) => op.name}\n          style={{ width: 300, display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          renderInput={(params) => <TextField {...params} label=\"Item list\" variant=\"outlined\" />}\n        />\n        {/* The body variation */}\n        {\n          currentItem != null && currentItem.body_variations.length > 0 &&\n          <Autocomplete\n          value={currentBody}\n          onChange={(e, v) => setBody(v)}\n          p={2}\n          id=\"body-list\"\n          options={currentItem.body_variations}\n          getOptionLabel={(op) => op.slice(-5)}\n          style={{ width: 300, display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          renderInput={(params) => <TextField {...params} label=\"Body variation\" variant=\"outlined\" />}\n        />\n        }\n        {/* The fabric variation */}\n        {\n          currentItem != null && currentItem.fabric_variations.length > 0 &&\n          <Autocomplete\n          value={currentFabric}\n          onChange={(e, v) => setFabric(v)}\n          p={2}\n          id=\"fabric-list\"\n          options={currentItem.fabric_variations}\n          getOptionLabel={(op) => op.slice(-7)}\n          style={{ width: 300, display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          renderInput={(params) => <TextField {...params} label=\"Fabric variation\" variant=\"outlined\" />}\n        />\n        }\n      </div>\n      {currentItem == null\n        ? <div> Select an item!</div>\n      : <Canvas style={{ flex: 1 }}>\n          <ambientLight />\n          <Scene url={getFileName(currentItem, currentBody, currentFabric)} />\n        </Canvas>\n      }\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ModelViewer />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}